# Generated by Django 3.2 on 2022-10-07 05:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Класс')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Предметь')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Учитель(ница)')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizeStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='ресурсы')),
            ],
        ),
        migrations.CreateModel(
            name='Teaching',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('observer', models.CharField(max_length=255, verbose_name='Наблюдатель')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Учителем предоставлен')),
                ('teacher_discus', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель обсуждает с учащимися цели обучения и ожидаемые результаты урока')),
                ('teacher_follows', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель соблюдает структуру урока в соответствии с планом (при необходимости корректирует план урока, не нарушая логической последовательности этапов урока)')),
                ('teaching_techn_coll', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует приемы обучения, направленные на поддержку учебного сотрудничества')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.lesson', verbose_name='Предмет')),
                ('organizestudy', models.ManyToManyField(to='myapp.OrganizeStudy', verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
                ('resources', models.ManyToManyField(to='myapp.Resources', verbose_name='Учитель использует ресурсы, направленные на:')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='PlanningLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('observer', models.CharField(max_length=255, verbose_name='Наблюдатель')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Учителем предоставлен')),
                ('plan_contains', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='План содержит понятные для учащихся ожидаемые результаты урока и критерии успеха')),
                ('plan_lern_methods', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые приемы обучения соотносятся с целями обучения и ожидаемыми результатами*')),
                ('plan_resourсes', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые ресурсы направлены на достижение целей обучения')),
                ('plan_strategy', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Планируемые стратегии оценивания учебных достижений учащихся направлены на достижение целей обучения')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.lesson', verbose_name='Предмет')),
                ('organizestudy', models.ManyToManyField(to='myapp.OrganizeStudy', verbose_name='Учебный материал отражает')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='ComprehensiveControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('plan', models.CharField(choices=[('самостоятельно разработанного урока', 'самостоятельно разработанного урока'), ('совместно разработанного с коллегами урока в рамках исследования урока', 'совместно разработанного с коллегами урока в рамках исследования урока'), ('урока в рамках исследования практики', 'урока в рамках исследования практики'), ('урока по авторской программе', 'урока по авторской программе'), ('урока по авторской методике', 'урока по авторской методике')], default='самостоятельно разработанного урока', max_length=255, verbose_name='Предаставлен план')),
                ('lern_obj', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Цели обучения соответствуют месту и роли урока в структуре раздела, темы')),
                ('teacher_discus', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель обсуждает с учащимися цели обучения и ожидаемые результаты урока')),
                ('teacher_follows', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель соблюдает структуру урока в соответствии с планом (при необходимости корректирует план урока, не нарушая логической последовательности этапов урока)')),
                ('teaching_techniques', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует приемы обучения, способствующие достижению целей обучения')),
                ('teacher_monitors', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель отслеживает вовлеченность каждого учащегося')),
                ('teacher_offers', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предлагает учащимся критерии и дескрипторы оценивания в соответствии с целями обучения')),
                ('teacher_support', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель поддерживает обучение учащихся соответствующими приемами формативного оценивания')),
                ('teacher_provide', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предоставляет конструктивную обратную связь учащимся')),
                ('teacher_uses', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует результаты формативного оценивания для планирования уроков')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.lesson', verbose_name='Предмет')),
                ('observer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observer', to=settings.AUTH_USER_MODEL, verbose_name='Наблюдатель')),
                ('organizestudy', models.ManyToManyField(to='myapp.OrganizeStudy', verbose_name='При организации изучения учебного материала учитель обеспечивает* и реализует')),
                ('resources', models.ManyToManyField(to='myapp.Resources', verbose_name='Учитель использует ресурсы, направленные на:')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentStudentLearning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_observ', models.DateTimeField(auto_now_add=True, verbose_name='Дата наблюдения урока')),
                ('lesson_title', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('goal_prof_develop', models.CharField(max_length=255, verbose_name='Цель профессионального развития на учебный год')),
                ('teacher_observe', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель отслеживает вовлеченность каждого учащегося')),
                ('teacher_offers', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предлагает учащимся критерии и дескрипторы оценивания в соответствии с целями обучения')),
                ('teacher_support', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель поддерживает обучение учащихся соответствующими приемами формативного оценивания')),
                ('teacher_provides', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель предоставляет конструктивную обратную связь учащимся')),
                ('teacher_uses', models.BooleanField(choices=[(True, 'Да'), (False, 'Нет')], verbose_name='Учитель использует результаты формативного оценивания для планирования уроков')),
                ('brief_feedback_observe', models.TextField(verbose_name='Краткий отзыв о наблюдении урока')),
                ('brief_feedback', models.TextField(verbose_name='Краткий отзыв о продвижении учителя к достижению цели профессионального развития на учебный год')),
                ('categoryclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.categoryclass', verbose_name='Класс')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.lesson', verbose_name='Предмет')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Выберите учителя')),
            ],
        ),
    ]
